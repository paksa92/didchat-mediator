generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  did             String           @unique
  isSuspended     Boolean          @default(false)
  privileges      UserPrivilege[]
  posts           Post[]
  media           Media[]
  reactions       Reaction[]
  annotations     Annotation[]
  annotationVotes AnnotationVote[]
  reports         Report[]         @relation("reporter")
  reviewedReports Report[]         @relation("reviewer")
  profile         Profile?         @relation(fields: [profileId], references: [id])
  profileId       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Privilege {
  id          String          @id @default(cuid())
  name        String          @unique
  displayName String          @db.VarChar(20)
  description String          @db.VarChar(150)
  users       UserPrivilege[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model UserPrivilege {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  privilege   Privilege @relation(fields: [privilegeId], references: [id])
  privilegeId String
  createdAt   DateTime  @default(now())

  @@id([userId, privilegeId])
}

model Profile {
  id             String    @id @default(cuid())
  displayName    String    @db.VarChar(40)
  displayPicture String?   @db.VarChar(255)
  coverPicture   String?   @db.VarChar(255)
  bio            String?   @db.VarChar(140)
  dateOfBirth    DateTime?
  country        String?   @db.VarChar(2)
  user           User[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Post {
  id              String       @id @default(cuid())
  body            String?      @db.Text
  isPinned        Boolean      @default(false)
  isHidden        Boolean      @default(false)
  isRepostAllowed Boolean      @default(true)
  media           Media[]
  reactions       Reaction[]
  replies         Post[]       @relation("reply")
  reposts         Post[]       @relation("repost")
  quotes          Post[]       @relation("quote")
  annotations     Annotation[]
  reports         Report[]
  replyTo         Post?        @relation("reply", fields: [replyToId], references: [id])
  replyToId       String?
  repostedPost    Post?        @relation("repost", fields: [repostedPostId], references: [id])
  repostedPostId  String?
  quotedPost      Post?        @relation("quote", fields: [quotedPostId], references: [id])
  quotedPostId    String?
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime     @default(now())
  deletedAt       DateTime?
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id           String    @id @default(cuid())
  type         MediaType
  url          String    @db.VarChar(255)
  thumbnailUrl String?   @db.VarChar(255)
  width        Int?
  height       Int?
  duration     Int?
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  post         Post?     @relation(fields: [postId], references: [id])
  postId       String?
  createdAt    DateTime  @default(now())
}

enum ReactionType {
  THUMBS_UP
  HEART
  LAUGHING
  ASTONISHED
  SMILING
  PENSIVE
  RAISING_HANDS
  HEART_EYES
  CLAPPING
  THINKING
  SUNGLASSES
  CRYING
  THUMBS_DOWN
  ANGRY
  FEARFUL
  ROFL
  PLEADING
  PRAYING
  CURSING
  GRINNING
}

model Reaction {
  type      ReactionType
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  post      Post         @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime     @default(now())

  @@id([userId, postId])
}

model Annotation {
  id        String           @id @default(cuid())
  body      String           @db.Text
  votes     AnnotationVote[]
  reports   Report[]
  post      Post             @relation(fields: [postId], references: [id])
  postId    String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AnnotationVote {
  vote         Boolean
  annotation   Annotation @relation(fields: [annotationId], references: [id])
  annotationId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())

  @@id([annotationId, userId])
}

enum ReportDecision {
  NO_ACTION
  ISSUE_WARNING
  DELETE_CONTENT
  HIDE_CONTENT
  TEMPORARY_SUSPENSION
  PERMANENT_SUSPENSION
  PRIVILEGE_REVOCATION
}

model Report {
  id             String           @id @default(cuid())
  isReviewed     Boolean          @default(false)
  body           String           @db.VarChar(300)
  decisionReason String?          @db.VarChar(300)
  decisions      ReportDecision[]
  post           Post?            @relation(fields: [postId], references: [id])
  postId         String?
  annotation     Annotation?      @relation(fields: [annotationId], references: [id])
  annotationId   String?
  reporter       User             @relation("reporter", fields: [reporterId], references: [id])
  reporterId     String
  reviewer       User?            @relation("reviewer", fields: [reviewerId], references: [id])
  reviewerId     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}
